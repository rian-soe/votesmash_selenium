stages:
  - test
  - build
  - deploy

variables:
  NODE_VERSION: "18"
  MYSQL_ROOT_PASSWORD: "root_password"
  MYSQL_DATABASE: "votesmash"
  MYSQL_USER: "votesmash_user"
  MYSQL_PASSWORD: "votesmash_password"

services:
  - mysql:8.0

before_script:
  - apt-get update -qq && apt-get install -y -qq wget gnupg unzip
  - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
  - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
  - apt-get update -qq && apt-get install -y google-chrome-stable
  - CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d'.' -f1-3)
  - CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
  - wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
  - unzip /tmp/chromedriver.zip -d /usr/local/bin/
  - chmod +x /usr/local/bin/chromedriver
  - npm ci

test:
  stage: test
  image: node:18-slim
  variables:
    HEADLESS: "true"
    BROWSER: "chrome"
    WINDOW_SIZE: "1920,1080"
    CI: "true"
    DB_HOST: "mysql"
    DB_USER: "votesmash_user"
    DB_PASSWORD: "votesmash_password"
    DB_NAME: "votesmash"
    DB_PORT: "3306"
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - test/test_results/
    expire_in: 1 week

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  only:
    - main
    - develop

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "docker stop selenium-tests || true"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "docker rm selenium-tests || true"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "docker run -d --name selenium-tests -e HEADLESS=true -e CI=true $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  only:
    - main
  when: manual
